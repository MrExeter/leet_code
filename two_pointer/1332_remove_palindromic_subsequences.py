"""
You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic
subsequence from s.

Return the minimum number of steps to make the given string empty.
A string is a subsequence of a given string if it is generated by deleting some characters of a given string without
changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.

Constraints:

    1 <= s.length <= 1000
    s[i] is either 'a' or 'b'.

"""


class Solution:
    def removePalindromeSub(self, s: str) -> int:
        left, right = 0, len(s) - 1
        while left < right:
            if s[left] != s[right]:
                return 2
            left += 1
            right -= 1
        return 1

if __name__ == '__main__':
    # s = "ababa"
    s = "abb"

    sol = Solution()
    ans = sol.removePalindromeSub(s)
    print(ans)

